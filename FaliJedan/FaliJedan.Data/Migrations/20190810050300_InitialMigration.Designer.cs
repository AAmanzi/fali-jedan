// <auto-generated />
using System;
using FaliJedan.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FaliJedan.Data.Migrations
{
    [DbContext(typeof(FaliJedanContext))]
    [Migration("20190810050300_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("RulesForAquire");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentNumberOfPlayers");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EventEnd");

                    b.Property<DateTime>("EventStart");

                    b.Property<bool>("IsInstantJoin");

                    b.Property<double>("LocationLatitude");

                    b.Property<double>("LocationLongitude");

                    b.Property<string>("Name");

                    b.Property<int>("SportId");

                    b.Property<int>("TargetNumberOfPlayers");

                    b.Property<int>("TargetSkillLevel");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.EventUser", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("EventId");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCanceled");

                    b.Property<bool>("IsHost");

                    b.Property<bool>("IsReviewed");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nogomet"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Košarka"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tenis"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Odbojka"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Američki nogomet"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ragbi"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Rukomet"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Vaterpolo"
                        });
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Subsctiptions");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttendedEventCount");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<int>("HostedEventCount");

                    b.Property<bool>("IsSuperUser");

                    b.Property<string>("LastName");

                    b.Property<int>("NumberOfRatings");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<Guid?>("SubscriptionId");

                    b.Property<int>("TotalRating");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.Property<int>("UsersRatedCount");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique()
                        .HasFilter("[SubscriptionId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.UserBadge", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("BadgeId");

                    b.Property<int>("Level");

                    b.HasKey("UserId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.Event", b =>
                {
                    b.HasOne("FaliJedan.Data.Entities.Models.Sport", "Sport")
                        .WithMany("Events")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.EventUser", b =>
                {
                    b.HasOne("FaliJedan.Data.Entities.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FaliJedan.Data.Entities.Models.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.RefreshToken", b =>
                {
                    b.HasOne("FaliJedan.Data.Entities.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.User", b =>
                {
                    b.HasOne("FaliJedan.Data.Entities.Models.Subscription", "Subscription")
                        .WithOne("User")
                        .HasForeignKey("FaliJedan.Data.Entities.Models.User", "SubscriptionId");
                });

            modelBuilder.Entity("FaliJedan.Data.Entities.Models.UserBadge", b =>
                {
                    b.HasOne("FaliJedan.Data.Entities.Models.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FaliJedan.Data.Entities.Models.User", "User")
                        .WithMany("UserBadges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
